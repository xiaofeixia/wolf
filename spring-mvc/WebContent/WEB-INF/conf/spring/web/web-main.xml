<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<context:component-scan base-package="com.nf.yun.web" />

	<bean id="ResourceConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/conf/server.properties</value>
			</list>
		</property>
	</bean>

	<!-- view -->
	<bean id="velocityViewCache"
		class="com.eyeieye.melody.util.cache.local.SimpleHashMapCompactCache"></bean>
	<bean id="velocityConfigurer"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="WEB-INF/views/" />
		<property name="velocityProperties">
			<map>
				<entry key="input.encoding" value="${vm.file.encoding}"></entry>
				<entry key="output.encoding" value="${web.encoding}"></entry>
				<entry key="file.resource.loader.cache" value="${vm.cache}"></entry>
				<entry key="file.resource.loader.modificationCheckInterval"
					value="-1"></entry>
				<!-- cache directive 相关配置 -->
				<entry key="userdirective"
					value="com.eyeieye.melody.web.velocity.directive.CacheDirective"></entry>
				<!-- direcitive.cache.provider 配置cache的提供者 -->
				<entry key="direcitive.cache.provider" value-ref="velocityViewCache"></entry>
				<!-- direcitive.cache.close_velocity_cache 控制是否打开cache,如果是true,则关闭 -->
				<entry key="direcitive.cache.dev.mode" value="close_velocity_cache"></entry>
			</map>
		</property>
		<property name="configLocation" value="WEB-INF/conf/velocity.properties"></property>
	</bean>

	<bean id="viewResolver"
		class="com.eyeieye.melody.web.velocity.resolver.I18nVelocityLayoutViewResolver">
		<property name="order" value="10" />
		<property name="suffix" value=".vm" />
		<property name="prefix" value="screen/" />
		<property name="layoutUrl" value="layout/default.vm" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="dateToolAttribute" value="dateTool" />
		<property name="numberToolAttribute" value="numberTool" />
		<property name="toolboxConfigLocation" value="WEB-INF/conf/vm-toolbox.xml" />
		<property name="contentType" value="${web.contentType}"></property>
		<property name="templateEncoding" value="${vm.file.encoding}"></property>
	</bean>

	<!-- jsp view 支持 -->
	<!--  
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="order" value="100" /> 
		<property name="prefix" value="/WEB-INF/views/screen/" /> 
		<property name="suffix" value=".jsp" /> 
	</bean> 
	-->

	<!-- adapters -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
		<!-- <bean
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" /> -->
	<bean
		class="com.eyeieye.melody.web.adapter.ExtendableAnnotationMethodHandlerAdapter">
		<!-- <property name="messageConverters"> <list> <bean class="com.eyeieye.melody.web.adapter.converter.StringHttpMessageConverter" 
			> <property name="defaultCharset" value="${web.encoding}"></property> </bean> 
			<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
			/> </list> </property> <property name="customArgumentResolvers"> <list> 只要在method声明Cookyjar对象,则自动注入 
			<bean class="com.eyeieye.melody.web.cookyjar.CookyjarArgumentResolver"></bean> 
			只要在method声明SettlerAgent对象,则自动注入 <bean class="com.ec.web.resolver.AdminAgentArgumentResolver"></bean> 
			只要在method声明CheckCode对象,则自动注入 验证码 <bean class="com.ec.web.resolver.CheckCodeArgumentResolver"></bean> 
			</list> </property> <property name="methodInvokeInterceptors"> <list> <bean 
			class="com.ec.biz.security.AdminAuthorityHandlerInterceptor"></bean> </list> 
			</property> -->

	</bean>

	<!-- url mapping -->
	<bean id="defaultHandlerMapping"
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="order" value="0" />
		<property name="interceptors">
			<list>
				<!-- <ref bean="brokersInterceptor" /> -->
			</list>
		</property>
	</bean>
	<!-- 请求如何映射到具体的Action中的方法 方案二：基于注解映射，可以使用DefaultAnnotationHandlerMapping -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="200" />
		<property name="interceptors">
			<list>
			</list>
		</property>
	</bean>

	<bean id="lastHandlerMapping"
		class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order" value="999" />
		<property name="defaultHandler">
			<bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController"></bean>
		</property>
		<property name="interceptors">
			<list>
				<!-- <ref bean="brokersInterceptor" /> -->
			</list>
		</property>
	</bean>


</beans>