<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
	default-lazy-init="false">

	<bean id="ResourceConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/conf/server.properties</value>
			</list>
		</property>
	</bean>
	<!-- a PlatformTransactionManager is still required -->
	<bean id="basicDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="10" />
		<property name="minIdle">
			<value>${jdbc.minIdle}</value>
		</property>

		<property name="maxActive">
			<value>${jdbc.maxActive}</value>
		</property>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait">
			<value>${jdbc.maxWait}</value>
		</property>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j,config" />

		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="180" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
		<!-- <property name="connectionProperties" value="config.decrypt=true" 
			/> -->
		<!-- 提示对数据库密码进行解密 -->
	</bean>


	<!-- <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="${jdbc.driverClassName}" 
		/> <property name="url" value="${jdbc.url}" /> <property name="username" 
		value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
		/> <property name="initialSize" value="1" /> <property name="maxIdle" value="2" 
		/> <property name="minIdle" value="1" /> <property name="maxActive" value="${jdbc.maxActive}" 
		/> <property name="maxWait" value="${jdbc.maxWait}" /> <property name="testWhileIdle" 
		value="true" /> <property name="validationQuery" value="select 1 from dual" 
		/> <property name="poolPreparedStatements" value="true" /> <property name="defaultAutoCommit" 
		value="true" /> </bean> -->


	<bean id="dataSource" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces">
			<value>javax.sql.DataSource</value>
		</property>
		<property name="target" ref="basicDataSource">
		</property>
		<property name="interceptorNames">
			<list>
				<value>dataSouceInterceptor</value>
			</list>
		</property>
	</bean>


	<bean id="dataSouceInterceptor" class="com.eyeieye.melody.profiler.jdbc.DataSouceInterceptor" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置REDIS 缓存服务器 -->
	<!-- 对象池配置： -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
		<!-- <property name="password" value="${redis.password}" /> -->
	</bean>

	<!-- REDIS操作模板 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory">
			<ref bean="jedisConnectionFactory" />
		</property>
	</bean>


	<!-- REDIS对象序列化 -->
	<bean id="redisSerializer"
		class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />


	<!-- namedParameterJdbcTemplate 定义：基于bean属性名的ORM映射 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg type="org.springframework.jdbc.core.JdbcOperations">
			<ref bean="jdbcTemplate" />
		</constructor-arg>
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>WEB-INF/conf/SqlMapConfig.xml</value>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:com/ec/biz/**/*SQL.xml</value>
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>
</beans>